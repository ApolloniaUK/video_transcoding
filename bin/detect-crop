#!/usr/bin/env ruby -W
#
# detect-crop
#
# Copyright (c) 2013-2016 Don Melton
#

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')

require 'video_transcoding/cli'

module VideoTranscoding
  class Command
    include CLI

    def about
      <<HERE
detect-crop #{VERSION}
#{COPYRIGHT}
HERE
    end

    def usage
      <<HERE
Detect crop values for video file or disc image directory.

Usage: #{$PROGRAM_NAME} [OPTION]... [FILE|DIRECTORY]...

    --scan          list title(s) and tracks in video media and exit
    --title NUMBER  select numbered title in video media
                      (default: main feature or first listed)
    --constrain     constrain crop to optimal shape
    --values-only   output only unambiguous crop values, not commands

-v, --verbose       increase diagnostic information
-q, --quiet         decrease     "           "

-h, --help          display this help and exit
    --version       output version information and exit

Requires `HandBrakeCLI` and `mplayer`.
HERE
    end

    def initialize
      super
      @scan         = false
      @title        = nil
      @constrain    = false
      @values_only  = false
    end

    def define_options(opts)
      opts.on('--scan')               { @scan = true }
      opts.on('--title ARG', Integer) { |arg| @title = arg }
      opts.on('--constrain')          { @constrain = true }
      opts.on('--values-only')        { @values_only = true }

      opts.on '--no-constrain' do
        Console.warn 'Using deprecated option: --no-constrain'
        @constrain = false
      end
    end

    def configure
      HandBrake.setup
      MPlayer.setup
    end

    def process_input(arg)
      Console.info "Processing: #{arg}..."

      if @scan
        media = Media.new(path: arg, title: @title)
        Console.debug media.info
        puts media.summary
        return
      end

      media = Media.new(path: arg, title: @title, autocrop: true, extended: false)
      Console.debug media.info
      width, height = media.info[:width], media.info[:height]
      directory = media.info[:directory]
      hb_crop = media.info[:autocrop]
      hb_crop = Crop.constrain(hb_crop, width, height) if @constrain
      shell_path = arg.shellescape

      print_transcode = ->(crop) do
        puts
        print 'transcode-video '
        print "--title #{media.info[:title]} " if directory
        puts "--crop #{Crop.handbrake_string(crop)} #{shell_path}"
        puts
      end

      print_all = ->(crop) do
        str = Crop.mplayer_string(crop, width, height)
        puts
        puts "mplayer -really-quiet -nosound -vf rectangle=#{str} #{shell_path}"
        puts "mplayer -really-quiet -nosound -vf crop=#{str} #{shell_path}"
        print_transcode.call crop
      end

      if directory
        if @values_only
          puts Crop.handbrake_string(hb_crop)
        else
          print_transcode.call hb_crop
        end
      else
        mp_crop = Crop.detect(arg, media.info[:duration], width, height)
        mp_crop = Crop.constrain(mp_crop, width, height) if @constrain

        if hb_crop == mp_crop
          if @values_only
            puts Crop.handbrake_string(hb_crop)
          else
            Console.info 'Results from HandBrakeCLI and mplayer are identical...'
            print_all.call hb_crop
          end
        else
          fail "results from HandBrakeCLI and mplayer differ: #{arg}" if @values_only
          Console.warn 'Results differ...'
          puts
          puts '# From HandBrakeCLI:'
          print_all.call hb_crop
          puts '# From mplayer:'
          print_all.call mp_crop
        end
      end
    end
  end
end

VideoTranscoding::Command.new.run
